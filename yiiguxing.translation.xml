<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1685679145894" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="RUSSIAN" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogX" value="700" />
    <option name="newTranslationDialogY" value="509" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="draft" />
      <item value="An id attribute to allow the &lt;textarea&gt; to be associated with a &lt;label&gt; element for accessibility purposes&#10;A name attribute to set the name of the associated data point submitted to the server when the form is submitted.&#10;rows and cols attributes to allow you to specify an exact size for the &lt;textarea&gt; to take. Setting these is a good idea for consistency, as browser defaults can differ.&#10;Default content entered between the opening and closing tags. &lt;textarea&gt; does not support the value attribute.&#10;The &lt;textarea&gt; element also accepts several attributes common to form &lt;input&gt;s, such as autocomplete, autofocus, disabled, placeholder, readonly, and require" />
      <item value="Create a list (and possibly some surrounding logic) where you ensure that NO duplicate values can be added. Use whichever approach seems appropriate to you." />
      <item value="console.log(min, max);&#10;" />
      <item value="Pass the array from task 1 split up into multiple arguments to that function." />
      <item value="4. Add a new function: &quot;checkInput&quot; which takes an unlimited amount of arguments (unlimited amount of strings) and executes a callback function if NO argument string is an empty string." />
      <item value="3. Add a default argument to the function you created: A fallback value for the phrase if no value is provided." />
      <item value="Adjust" />
      <item value="Adjust the arrow function you created as part of task 1 to use three different syntaxes: With two arguments (incl. a phrase that replaces &quot;Hi&quot;), with no arguments (hard-coded values in function body) and with one returned value (instead of outputting text inside of the function directly).&#10;" />
      <item value="Handle breakMe()'s error with grace" />
      <item value="grace" />
      <item value="greater" />
      <item value="by subtracting a value of your choice" />
      <item value="innerText is aware of the rendered appearance of text, while textContent is not." />
      <item value="the result and the user input variables" />
      <item value="Set the result variable to 18 plus the value stored in user input." />
      <item value="Think about the value stored in the user input variable you also created - did that value change?" />
      <item value="(by subtracting a value of your choice, multiplying it and dividing it)." />
      <item value="fictional user input" />
      <item value="&lt;section id='calculator'&gt;&#10;" />
      <item value="contain – Default scroll overflow behavior is observed inside the element this value is set on (e.g. &quot;bounce&quot; effects or refreshes), but no scroll chaining occurs to neighboring scrolling areas, e.g. underlying elements will not scroll." />
      <item value="min-content – The intrinsic minimum width." />
      <item value="Uses the fit-content formula with the available space replaced by the specified argument, i.e. min(max-content, max(min-content, &lt;length-percentage&gt;))" />
      <item value="he intrinsic minimum width." />
      <item value="shrink" />
      <item value="The Event interface's preventDefault() method tells the user agent  that if the event does not get explicitly handled, its default action should not be taken as it normally would be. The event continues to propagate as usual, unless one of its event listeners calls stopPropagation() or stopImmediatePropagation(), either of which terminates propagation at once.&#10;As noted below, calling preventDefault() for a non-cancelable event, such as one dispatched via EventTarget.dispatchEvent(), without specifying cancelable: true has no effect" />
      <item value="Reports problems that are found by language annotators in the result of a batch code inspection run." />
      <item value="Reports problems that are found by language annotators in the result of a batch code inspection run.Reports problems that are found by language annotators in the result of a batch code inspection run." />
      <item value="If true, the root node will inherit the custom component's viewBox and the viewBox prop will be ignored. Useful when you want to reference a custom component and have SvgIcon pass that component's viewBox to the root node." />
      <item value="chocolate" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="18" />
        <entry key="RUSSIAN" value="22" />
      </map>
    </option>
  </component>
</application>